   !!======================================================================
   !!                   ***  traldf_iso_scheme.h90  ***
   !! tra_ldf:   divergence the lateral iso-neutral fluxes
#if defined iso_lap
   !!                             laplacian
#elif defined iso_blp_p1
   !!                        bilaplacian: 1st pass
#elif defined iso_blp_p2
   !!                        bilaplacian: 2nd pass
#endif
   !!======================================================================
   !! History :  4.5  ! 2022-08  (S. Techene, G, Madec) refactorization to reduce local memory usage
   !!                                                 + no more re-entering lap with traldf_iso_blp creation
   !!----------------------------------------------------------------------

	    
            !!======================================================================
            !!  masked tracer gradient : (zdit, zdjt, zdkt) at both jk and jk+1
            !!======================================================================
            !
            IF( jk == 1 ) THEN                         !=  surface level  =!   compute level 1 and 2
               !
               ik = 0   ;   ikp1 = 1                        ! ik-index initialisation
               !
               DO_2D( INN+1, INN , INN+1, INN  )
                  zdit(ji,jj,ik  ) = ( pt_in(ji+1,jj,jk  ,jn,Kbb) - pt_in(ji,jj,jk  ,jn,Kbb) ) * umask(ji,jj,jk  )
                  zdit(ji,jj,ikp1) = ( pt_in(ji+1,jj,jk+1,jn,Kbb) - pt_in(ji,jj,jk+1,jn,Kbb) ) * umask(ji,jj,jk+1)
                  !
                  zdjt(ji,jj,ik  ) = ( pt_in(ji,jj+1,jk  ,jn,Kbb) - pt_in(ji,jj,jk  ,jn,Kbb) ) * vmask(ji,jj,jk  )
                  zdjt(ji,jj,ikp1) = ( pt_in(ji,jj+1,jk+1,jn,Kbb) - pt_in(ji,jj,jk+1,jn,Kbb) ) * vmask(ji,jj,jk+1)
               END_2D
               !
               DO_2D( INN+1, INN+1, INN+1, INN+1 )
                  zdkt(ji,jj,ik  ) = 0._wp                                                                        ! level 1 (=0)
                  zdkt(ji,jj,ikp1) = ( pt_in(ji,jj,jk,jn,Kbb) - pt_in(ji,jj,jk+1,jn,Kbb) ) * wmask(ji,jj,jk+1)    ! level 2
               END_2D
               !
            ELSEIF( 2 <= jk .AND. jk <= jpk-2 ) THEN   !=  deeper level  =!   compute level jk+1 only
               !
               iis = ik   ;   ik = ikp1   ;   ikp1 = iis    ! swap ik-index 
               !
               DO_2D( INN+1, INN , INN+1, INN  )
                  zdit(ji,jj,ikp1) = ( pt_in(ji+1,jj  ,jk+1,jn,Kbb) - pt_in(ji,jj,jk+1,jn,Kbb) ) * umask(ji,jj,jk+1)
                  zdjt(ji,jj,ikp1) = ( pt_in(ji  ,jj+1,jk+1,jn,Kbb) - pt_in(ji,jj,jk+1,jn,Kbb) ) * vmask(ji,jj,jk+1)
               END_2D
               DO_2D( INN+1, INN+1, INN+1, INN+1 )
                  zdkt(ji,jj,ikp1) = ( pt_in(ji,jj,jk,jn,Kbb) - pt_in(ji,jj,jk+1,jn,Kbb) ) * wmask(ji,jj,jk+1)    ! w-level jk+1
               END_2D
               !
            ELSEIF( jk == jpkm1 ) THEN                 !=  jpk-1 level =!   zdit, zdjt not used ; zdkt(jpk) always 0 as wmask(jpk)=0
               !
               iis = ik   ;   ik = ikp1   ;   ikp1 = iis    ! swap ik-index 
               !
               DO_2D( INN+1, INN+1, INN+1, INN+1 )
                  zdkt(ji,jj,ikp1) = 0._wp                                                                        ! w-level jpk
               END_2D
            ENDIF
	    !
            !!----------------------------------------------------------------------
            !                             (  A11   0   A13  )      
            !  rotation matrix        A = (   0   A22  A23  )
            !                             (  A31  A32  A33  )
            !!----------------------------------------------------------------------

            !!======================================================================
            !!     HORIZONTAL iso-neutral fluxes
            !!======================================================================
            ! CAUTION:   round brackets are required for halo size and north fold compatibility 
            !
            DO_2D( INN+1, INN , INN+1, INN )    !==  Horizontal fluxes  ==!   used elements: (  A11   -   A13  )
               !                                                                             (   -   A22  A23  )
               !
               zA11 = e2_e1u(ji,jj) * e3u(ji,jj,jk,Kmm)
               zA22 = e1_e2v(ji,jj) * e3v(ji,jj,jk,Kmm)
               !
               zmsku = 1._wp / MAX(  ( wmask(ji+1,jj,jk  ) + wmask(ji,jj,jk+1) )         &
                  &                + ( wmask(ji+1,jj,jk+1) + wmask(ji,jj,jk  ) ) , 1._wp )
               zmskv = 1._wp / MAX(  ( wmask(ji,jj+1,jk  ) + wmask(ji,jj,jk+1) )         &
                  &                + ( wmask(ji,jj+1,jk+1) + wmask(ji,jj,jk  ) ) , 1._wp )
               !
               zA13 = - e2u(ji,jj) * uslp(ji,jj,jk) * zmsku
               zA23 = - e1v(ji,jj) * vslp(ji,jj,jk) * zmskv
               !
               zfu(ji,jj) =  ahtu(ji,jj,jk)                                                                      &   ! u-masked
                  &       * (   zA11 * zdit(ji,jj,ik) + zA13 * (  ( zdkt(ji+1,jj,ik  ) + zdkt(ji,jj,ikp1) )      &
                  &                                             + ( zdkt(ji+1,jj,ikp1) + zdkt(ji,jj,ik  ) )  )   )
               zfv(ji,jj) = ahtv(ji,jj,jk)                                                                       &   ! v-masked
                  &       * (   zA22 * zdjt(ji,jj,ik) + zA23 * (  ( zdkt(ji,jj+1,ik  ) + zdkt(ji,jj,ikp1) )      &
                  &                                             + ( zdkt(ji,jj+1,ikp1) + zdkt(ji,jj,ik  ) )  )   )
            END_2D
!!gm
!!gm OPTIM???    also verify the usage of akz ah_wslp2 in trazdf !!!
!!gm
            !
            !!======================================================================
            !!     VERTICAL iso-neutral fluxes   and   3D DIVERGENCE of fluxes
            !!======================================================================
            ! CAUTION:   round brackets are required for halo size and north fold compatibility 
            !
            !  used elements :  (  A31  A32  explicit part of A33 )   (ln_traldf_msc=F ==> ah_wslp2 = akz : full explicit)
            !
            IF( jk ==1 )   zfw(T2D(INN)) = 0._wp      ! set surface vertical flux to zero
            !
            IF( 1 <= jk .AND. jk <= jpk-2 ) THEN      ! ocean level except the deepest one (jpkm1)
               !
               DO_2D( INN, INN, INN, INN )
                  !                             !==  Vertical fluxes at jpk+1  ==!   used elements: ( A31  A32  and explicit part of A33 )
                  !
                  zmsku   = wmask(ji,jj,jk) / MAX(  ( umask(ji  ,jj,jk) + umask(ji-1,jj,jk+1) )          &
                     &                            + ( umask(ji-1,jj,jk) + umask(ji  ,jj,jk+1) ) , 1._wp  )
                  zmskv   = wmask(ji,jj,jk) / MAX(  ( vmask(ji,jj  ,jk) + vmask(ji,jj-1,jk+1) )          &
                     &                            + ( vmask(ji,jj-1,jk) + vmask(ji,jj  ,jk+1) ) , 1._wp  )
                     !
                  zahu_w  = (  ( ahtu(ji  ,jj,jk) + ahtu(ji-1,jj,jk+1) )    &
                     &       + ( ahtu(ji-1,jj,jk) + ahtu(ji  ,jj,jk+1) )  ) * zmsku
                  zahv_w  = (  ( ahtv(ji,jj  ,jk) + ahtv(ji,jj-1,jk+1) )    &
                     &       + ( ahtv(ji,jj-1,jk) + ahtv(ji,jj  ,jk+1) )  ) * zmskv
                     !
                  zA31    = - zahu_w * e2t(ji,jj) * zmsku * wslpi(ji,jj,jk+1)   ! NB: wslpi & j are already w-masked
                  zA32    = - zahv_w * e1t(ji,jj) * zmskv * wslpj(ji,jj,jk+1)   !     and * zmsk for zd.t averaging
                  !
                  zfw_kp1 = zA31 * (  ( zdit(ji  ,jj,ik) + zdit(ji-1,jj,ikp1) )      &   ! round brackets required for halo size
                     &              + ( zdit(ji-1,jj,ik) + zdit(ji  ,jj,ikp1) )  )   &   ! and north fold compatibility
                     &    + zA32 * (  ( zdjt(ji,jj  ,ik) + zdjt(ji,jj-1,ikp1) )      &
                     &              + ( zdjt(ji,jj-1,ik) + zdjt(ji,jj  ,ikp1) )  )   &
                     &    + e1e2t(ji,jj) / e3w(ji,jj,jk+1,Kmm) * wmask(ji,jj,jk+1)   &   ! vertical A33 flux :
#if defined iso_lap
                     &           * ( ah_wslp2(ji,jj,jk+1)        - akz(ji,jj,jk+1)    )   &   !   laplacian          : ah_wslp2 - akz
                     &           * ( pt      (ji,jj,jk  ,jn,Kbb) - pt (ji,jj,jk+1,jn,Kbb) )                          ! NB = 0 if ln_traldf_msc=F
#elif defined iso_blp_p1
                     &           *   ah_wslp2(ji,jj,jk+1)                                 &   ! bilaplacian, 1st pass: ah_wslp2 
                     &           * ( pt      (ji,jj,jk  ,jn,Kbb) - pt (ji,jj,jk+1,jn,Kbb) )
#elif defined iso_blp_p2
                     !                                                                        ! bilaplacian, 2nd pass:
                     &           * (  ah_wslp2(ji,jj,jk+1) * ( pt   (ji,jj,jk,jn,Kbb) - pt   (ji,jj,jk+1,jn,Kbb) )  &   ! ah_wslp2 on pt
                     &              +      akz(ji,jj,jk+1) * ( pt_in(ji,jj,jk,jn,Kbb) - pt_in(ji,jj,jk+1,jn,Kbb) )  )   ! akz      on pt in
#endif
		  !                             !==  Divergence of vertical fluxes  ==!
#if   defined iso_lap
                  pt(ji,jj,jk,jn,Krhs) = pt(ji,jj,jk,jn,Krhs) +               &   ! added to RHS with PLUS sign (lap)
#elif defined iso_blp_p1
                  zlap(ji,jj,jk)       =                                      &   ! store in zlap
#elif defined iso_blp_p2
                  pt(ji,jj,jk,jn,Krhs) = pt(ji,jj,jk,jn,Krhs) -               &   ! added to RHS with MINUS sign (blp)
#endif
                     &                  (  ( zfu(ji,jj) - zfu(ji-1,jj) )      &
                     &                   + ( zfv(ji,jj) - zfv(ji,jj-1) )      &
                     &                   + ( zfw(ji,jj) - zfw_kp1      )  )   & 
                     &                 * r1_e1e2t(ji,jj) / e3t(ji,jj,jk,Kmm)
                  !
                  zfw(ji,jj) = zfw_kp1          !==  Store zfw for next level calculation  ==!
                  !
               END_2D
               !
            ELSEIF( jk == jpkm1 ) THEN                ! level jpkm1   (zfw_kp1 at jpk always zero)
	       !
	       DO_2D( INN, INN, INN, INN )
#if   defined iso_lap
                  pt(ji,jj,jk,jn,Krhs) = pt(ji,jj,jk,jn,Krhs) +               &   ! added to RHS with PLUS sign (lap)
#elif defined iso_blp_p1
                  zlap(ji,jj,jk)       =                                      &   ! store in zlap
#elif defined iso_blp_p2
                  pt(ji,jj,jk,jn,Krhs) = pt(ji,jj,jk,jn,Krhs) -               &   ! added to RHS with MINUS sign (blp)
#endif
                     &                  (  ( zfu(ji,jj) - zfu(ji-1,jj) )      &
                     &                   + ( zfv(ji,jj) - zfv(ji,jj-1) )      &
                     &                   + ( zfw(ji,jj)                )  )   & 
                     &                 * r1_e1e2t(ji,jj) / e3t(ji,jj,jk,Kmm)
               END_2D
               !
	    ENDIF
            !
	         
!!gm note for futur improvements :
!
!!gm suggestion or more compact writing for a 3 time duplicated part
! 
!          !        ! averaging of u- and v-point values at w-point (i-k and j-k averaging)
!          !           ! NB:  round brackets required for  halo size and north fold compatibility
! define    Au_2_w(A3D,k)       (  ( A3D(ji  ,jj,k) + A3D(ji-1,jj,k+1) )    &   \
!                     &          + ( A3D(ji-1,jj,k) + A3D(ji  ,jj,k+1) )  )
! define    Av_2_w(A3D,k)       (  ( A3D(ji,jj  ,k) + A3D(ji,jj-1,k+1) )    &   \
!                     &          + ( A3D(ji,jj-1,k) + A3D(ji,jj  ,k+1) )  )
!! then :
!                   zmsku  = wmask(ji,jj,jk) / MAX( Au_2_w( umask, k ) , 1._wp )
!                   zmskv  = wmask(ji,jj,jk) / MAX( Av_2_w( vmask, k ) , 1._wp )
!                   zahu_w = Au_2_w( ahtu, k ) * zmsku
!                   zahv_w = Av_2_w( ahtv, k ) * zmskv
!                   zA31 = - zahu_w * e2t(ji,jj) * zmsku * wslpi(ji,jj,jk+1)   ! NB: wslpi & j are already w-masked
!                   zA32 = - zahv_w * e1t(ji,jj) * zmskv * wslpj(ji,jj,jk+1)
!                   !  
!                   ztfw_kp1 = zA31 * Au_2_w( zdit, 0 )         &          ! 3rd indice is ik,ikp1 ==>> 0 in argument
!                      &     + zA32 * Aw_2_v( zdjt, 0 )         &
!                      !
!!gm end