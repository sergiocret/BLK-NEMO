   !!======================================================================
   !!                   ***  dynldf_lev_sym_scheme.h90  ***
   !! dynldf_lev:   divergence the lateral fluxes
#if defined lap
   !!                             laplacian
#elif defined blp_p1
   !!                        bilaplacian: 1st pass
#elif defined blp_p2
   !!                        bilaplacian: 2nd pass
#endif
   !!======================================================================
   !! History :  4.5  ! 2022-10  (S. Techene, G, Madec) refactorization to reduce local memory usage
   !!                                                 + no more re-entering lap with dynldf_lev_rot_blp creation
   !!----------------------------------------------------------------------

            !
            DO_2D( INN, INN+1, INN, INN+1 )
               !                                      ! shearing stress component (F-point)   NB : ahmf has already been multiplied by fmask
               zshe(ji-1,jj-1) = ahmf(ji-1,jj-1,jk)                               &
                  &     * (    e1f(ji-1,jj-1)*r1_e2f(ji-1,jj-1) * (  pu_in(ji-1,jj  ,jk,Kbb) * r1_e1u(ji-1,jj  )      &
		  &                                                - pu_in(ji-1,jj-1,jk,Kbb) * r1_e1u(ji-1,jj-1)  )   &
                  &         +  e2f(ji-1,jj-1)*r1_e1f(ji-1,jj-1) * (  pv_in(ji  ,jj-1,jk,Kbb) * r1_e2v(ji  ,jj-1)      &
		  &                                                - pv_in(ji-1,jj-1,jk,Kbb) * r1_e2v(ji-1,jj-1)  )   ) 
               !                                      ! tension stress component (T-point)   NB : ahmt has already been multiplied by tmask
               zten(ji,jj)    = ahmt(ji,jj,jk)                                                       &
                  &     * (    e2t(ji,jj)    * r1_e1t(ji,jj)                                         &
                  &         * ( pu_in(ji,jj,jk,Kbb) * r1_e2u(ji,jj)  - pu_in(ji-1,jj,jk,Kbb) * r1_e2u(ji-1,jj) )   &
                  &         -  e1t(ji,jj)    * r1_e2t(ji,jj)                                         &
                  &         * ( pv_in(ji,jj,jk,Kbb) * r1_e1v(ji,jj)  - pv_in(ji,jj-1,jk,Kbb) * r1_e1v(ji,jj-1) )   )   
            END_2D
            !
            DO_2D( INN, INN, INN, INN )
#if   defined lap
            pu(ji,jj,jk,Krhs) = pu(ji,jj,jk,Krhs) +               &   ! added to RHS with PLUS sign (lap)
#elif defined blp_p1
            zulap(ji,jj)      =                                   &   ! store in zulap
#elif defined blp_p2
            pu(ji,jj,jk,Krhs) = pu(ji,jj,jk,Krhs) -               &   ! added to RHS with MINUS sign (blp) 
#endif
                  &  r1_e1e2u(ji,jj) / e3u(ji,jj,jk,Kmm)                                                           &
                  &    * (   (  zten(ji+1,jj) * e2t(ji+1,jj)*e2t(ji+1,jj)*e3t(ji+1,jj,jk,Kmm)                      &
                  &           - zten(ji  ,jj) * e2t(ji  ,jj)*e2t(ji  ,jj)*e3t(ji  ,jj,jk,Kmm)  ) * r1_e2u(ji,jj)   &
                  &        + (  zshe(ji,jj  ) * e1f(ji,jj  )*e1f(ji,jj  )*e3f(ji,jj  ,jk)                          &
                  &           - zshe(ji,jj-1) * e1f(ji,jj-1)*e1f(ji,jj-1)*e3f(ji,jj-1,jk)      ) * r1_e1u(ji,jj)   )
#if   defined lap
            pv(ji,jj,jk,Krhs) = pv(ji,jj,jk,Krhs) +               &   ! added to RHS with PLUS sign (lap)
#elif defined blp_p1
            zvlap(ji,jj)      =                                   &   ! store in zulap
#elif defined blp_p2
            pv(ji,jj,jk,Krhs) = pv(ji,jj,jk,Krhs) -               &   ! added to RHS with MINUS sign (blp) 
#endif            
                  &    r1_e1e2v(ji,jj) / e3v(ji,jj,jk,Kmm)                                                         &
                  &    * (   (  zshe(ji  ,jj) * e2f(ji  ,jj)*e2f(ji  ,jj)*e3f(ji  ,jj,jk)                          &
                  &           - zshe(ji-1,jj) * e2f(ji-1,jj)*e2f(ji-1,jj)*e3f(ji-1,jj,jk)      ) * r1_e2v(ji,jj)   &
                  &        - (  zten(ji,jj+1) * e1t(ji,jj+1)*e1t(ji,jj+1)*e3t(ji,jj+1,jk,Kmm)                      &
                  &           - zten(ji,jj  ) * e1t(ji,jj  )*e1t(ji,jj  )*e3t(ji,jj  ,jk,Kmm)  ) * r1_e1v(ji,jj)   )
               !
            END_2D
